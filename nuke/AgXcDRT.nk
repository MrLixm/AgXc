Group {
 name AgXcDRT
 tile_color 0x3a755e00
 note_font_color 0xefefefff
 addUserKnob {20 User l AgXcDRT}
 addUserKnob {26 txt_header l "" +STARTLINE T "<h1> AgXcDRT</h1>"}
 addUserKnob {26 txt_header_d l "" +STARTLINE T "<i>Input is expected to be BT.2020 encoded.</i>"}
 addUserKnob {26 txt_space1 l "" +STARTLINE T "|"}
 addUserKnob {6 plot_show l "Show Plot" -STARTLINE}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {26 txt_tonescale l "" +STARTLINE T "<h2> Tonescale </h2>"}
 addUserKnob {6 tonescale_apply_double l "Apply Double Tonescale" -STARTLINE}
 addUserKnob {18 print_contrast l "print contrast" R 0.8 4}
 print_contrast {1.0 1.0 1.0}
 addUserKnob {18 print_contrast_pivot l "print contrast pivot" R 0.1 1.0}
 print_contrast_pivot {0.65 0.65 0.65}
 addUserKnob {7 print_contrast_amount l "print contrast amount" R 0 1}
 print_contrast_amount 1.0
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {26 txt_display l "" +STARTLINE T "<h2> Display </h2>"}
 addUserKnob {6 todisplay_apply l "Apply Display Conversion" -STARTLINE}
 todisplay_apply true
 addUserKnob {20 About}
 addUserKnob {26 toolName l name T AgXcDRT}
 addUserKnob {26 toolVersion l version T 0.1.0}
 addUserKnob {26 toolAuthor l author T "<a style=\"color: rgb(200,200,200);\" href=\"https://mrlixm.github.io/\">Liam Collod</a>"}
 addUserKnob {26 toolDescription l description T "AgX(custom) Display Rendering Transform."}
 addUserKnob {26 toolUrl l url T "<a style=\"color: rgb(200,200,200);\" href=\"https://github.com/MrLixm/AgXc\">https://github.com/MrLixm/AgXc</a>"}
}
 Input {
  inputs 0
  name image
  xpos 0
  ypos 0
 }
 Dot {
  name Dot2ndTonescale
  xpos 0
  ypos 600
 }
 set N1aabb660 [stack 0]
  Group {
   xpos 0
   ypos 800
   name AgXcTonescale_second
   tile_color 0x3a755e00
   note_font_color 0xefefefff
   addUserKnob {20 User l AgXcTonescale}
   addUserKnob {26 txt_header l "" +STARTLINE T "<h1> AgXcTonescale</h1>"}
   addUserKnob {26 txt_header_d l "" +STARTLINE T "<i>Input is expected to be log encoded.</i>"}
   addUserKnob {26 "" +STARTLINE}
   addUserKnob {7 min_exposure l "min Exposure (EV)" R -15 0}
   min_exposure -10.5
   addUserKnob {7 max_exposure l "max Exposure (EV)" R 0 15}
   max_exposure 6.5
   addUserKnob {26 "" +STARTLINE}
   addUserKnob {18 x_pivot l "x pivot" R 0.1 0.9}
   x_pivot {{"fabs(min_exposure / (max_exposure - (min_exposure)))"}}
   addUserKnob {18 y_pivot l "y pivot" R 0.1 0.9}
   y_pivot 0.5
   addUserKnob {18 general_contrast l "general contrast" R 1.01 5}
   general_contrast 2.0
   addUserKnob {18 toe_power l "toe power" R 0 5}
   toe_power 3
   addUserKnob {18 shoulder_power l "shoulder power" R 0 5}
   shoulder_power 3.25
   addUserKnob {20 About}
   addUserKnob {26 toolName l name T AgXcTonescale}
   addUserKnob {26 toolVersion l version T 0.7.0}
   addUserKnob {26 toolAuthor l author T "<a style=\"color: rgb(200,200,200);\" href=\"https://mrlixm.github.io/\">Liam Collod</a>"}
   addUserKnob {26 toolDescription l description T "AgX tonescale curve algorithm."}
   addUserKnob {26 toolUrl l url T "<a style=\"color: rgb(200,200,200);\" href=\"https://github.com/MrLixm/AgXc\">https://github.com/MrLixm/AgXc</a>"}
  }
   Input {
    inputs 0
    name image
    xpos 0
    ypos 0
   }
   BlinkScript {
    inputs 1
    recompileCount 2
    ProgramGroup 1
    KernelDescription "3 \"AgXTonescale\" iterate pixelWise 62d49b8fffe0e146cd680fd19017775b5375d9bfc4300747f537c54139d68f98 2 \"src\" Read Point \"dst\" Write Point 5 \"u_x_pivot\" Float 3 AAAAPwAAAD8AAAA/AAAAAA== \"u_y_pivot\" Float 3 AAAAPwAAAD8AAAA/AAAAAA== \"u_general_contrast\" Float 3 AAAAQAAAAEAAAABAAAAAAA== \"u_toe_power\" Float 3 AABAQAAAQEAAAEBAAAAAAA== \"u_shoulder_power\" Float 3 AABQQAAAUEAAAFBAAAAAAA== 5 \"u_x_pivot\" 3 1 Default \"u_y_pivot\" 3 1 Default \"u_general_contrast\" 3 1 Default \"u_toe_power\" 3 1 Default \"u_shoulder_power\" 3 1 Default 0"
    kernelSource "// version 7\n// The tonescale curve for AgX\n// to apply on log-encoded imagery (unless u_log_convert is true)\n//\n// All equations are from Troy Sobotka and Jed Smith work :\n// https://github.com/sobotka/AgX-S2O3/blob/main/AgX.py\n\nkernel AgXTonescale : ImageComputationKernel<ePixelWise>\n\{\n    Image<eRead, eAccessPoint, eEdgeClamped> src;\n    Image<eWrite> dst;\n\n    param:\n        float3 u_x_pivot;\n        float3 u_y_pivot;\n        float3 u_general_contrast;\n        float3 u_toe_power;\n        float3 u_shoulder_power;\n\n    void define() \{\n        defineParam(u_x_pivot, \"u_x_pivot\", float3(0.5, 0.5, 0.5));\n        defineParam(u_y_pivot, \"u_y_pivot\", float3(0.5, 0.5, 0.5));\n        defineParam(u_general_contrast, \"u_general_contrast\", float3(2.0, 2.0, 2.0));\n        defineParam(u_toe_power, \"u_toe_power\", float3(3.0, 3.0, 3.0));\n        defineParam(u_shoulder_power, \"u_shoulder_power\", float3(3.25, 3.25, 3.25));\n    \}\n\n    void init() \{\}\n\n    float equation_scale(\n        float x_pivot, float y_pivot, float slope_pivot, float power\n    )\{\n        float a = pow(slope_pivot * x_pivot, -1.0 * power);\n        float b = pow(slope_pivot * (x_pivot / y_pivot), power) - 1.0;\n        return pow(a * b, -1.0 / power);\n    \}\n\n    float equation_hyperbolic(float x, float power)\{\n        return x / pow(1.0 + pow(x, power), 1.0 / power);\n    \}\n\n    float equation_term(float x, float x_pivot, float slope_pivot, float scale)\{\n        return (slope_pivot * (x - x_pivot)) / scale;\n    \}\n\n    float equation_curve(\n        float value,\n        float scale,\n        float x_pivot,\n        float y_pivot,\n        float contrast,\n        float toe_power,\n        float shoulder_power\n    )\{\n        float a = equation_hyperbolic(\n            equation_term(value, x_pivot, contrast, scale),\n            toe_power\n        );\n        a = a * scale + y_pivot;\n\n        float b = equation_hyperbolic(\n            equation_term(value, x_pivot, contrast, scale),\n            shoulder_power\n        );\n        b = b * scale + y_pivot;\n\n        return scale < 0.0? a: b;\n\n    \}\n\n    float equation_full_curve(\n        float value,\n        float x_pivot,\n        float y_pivot,\n        float contrast,\n        float toe_power,\n        float shoulder_power\n    )\{\n        float scale_x_pivot = value >= x_pivot? 1.0 - x_pivot: x_pivot;\n        float scale_y_pivot = value >= x_pivot? 1.0 - y_pivot: y_pivot;\n\n        float toe_scale = equation_scale(\n            scale_x_pivot,\n            scale_y_pivot,\n            contrast,\n            toe_power\n        );\n\n        float shoulder_scale = equation_scale(\n            scale_x_pivot,\n            scale_y_pivot,\n            contrast,\n            shoulder_power\n        );\n\n        float scale = value >= x_pivot? shoulder_scale: -1.0 * toe_scale;\n\n        return equation_curve(\n            value,\n            scale,\n            x_pivot,\n            y_pivot,\n            contrast,\n            toe_power,\n            shoulder_power\n        );\n    \}\n\n    void process(int2 pos) \{\n\n        float4 rgba = src();\n\n        float3 converted_rgb(rgba.x, rgba.y, rgba.z);\n\n        // apply per-channel tonescale curve\n        converted_rgb.x = equation_full_curve(\n            converted_rgb.x,\n            u_x_pivot.x,\n            u_y_pivot.x,\n            u_general_contrast.x,\n            u_toe_power.x,\n            u_shoulder_power.x\n        );\n        converted_rgb.y = equation_full_curve(\n            converted_rgb.y,\n            u_x_pivot.y,\n            u_y_pivot.y,\n            u_general_contrast.y,\n            u_toe_power.y,\n            u_shoulder_power.y\n        );\n        converted_rgb.z = equation_full_curve(\n            converted_rgb.z,\n            u_x_pivot.z,\n            u_y_pivot.z,\n            u_general_contrast.z,\n            u_toe_power.z,\n            u_shoulder_power.z\n        );\n\n        dst() = float4(\n            converted_rgb.x,\n            converted_rgb.y,\n            converted_rgb.z,\n            rgba.w\n        );\n    \}\n\};"
    rebuild ""
    AgXTonescale_u_x_pivot {{parent.x_pivot} {parent.x_pivot} {parent.x_pivot}}
    AgXTonescale_u_y_pivot {{parent.y_pivot} {parent.y_pivot} {parent.y_pivot}}
    AgXTonescale_u_general_contrast {{parent.general_contrast} {parent.general_contrast} {parent.general_contrast}}
    AgXTonescale_u_toe_power {{parent.toe_power} {parent.toe_power} {parent.toe_power}}
    AgXTonescale_u_shoulder_power {{parent.shoulder_power} {parent.shoulder_power} {parent.shoulder_power}}
    format "2048 2048 0 0 2048 2048 1 square_2K"
    rebuild_finalise ""
    name AgXTonescaleBlink
    xpos 0
    ypos 150
   }
   Output {
    name Output1
    xpos 0
    ypos 300
   }
  end_group
 push $N1aabb660
 Dot {
  name Dot2ndTonescale1
  xpos 100
  ypos 600
 }
 Dot {
  name Dot2ndTonescale2
  xpos 100
  ypos 850
 }
 Switch {
  inputs 2
  which {{parent.tonescale_apply_double}}
  name SwitchDoubleToneScale
  xpos 0
  ypos 850
 }
 # startfrom: https://github.com/jedypod/nuke-colortools/raw/master/toolsets/transfer_function/SigmoidParabolic.nk
 #MIT License
 #
 #Copyright 2020 Jedediah Smith
 #
 #Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 #
 #The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 #
 #THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 Expression {
  mix {{parent.print_contrast_amount}}
  xpos 0
  ypos 900
  expr0 r<t0.r?t0.r*(r/t0.r)**p.r:1+(t0.r-1)*((r-1)/(t0.r-1))**p.r
  expr1 g<t0.g?t0.g*(g/t0.g)**p.g:1+(t0.g-1)*((g-1)/(t0.g-1))**p.g
  expr2 b<t0.b?t0.b*(b/t0.b)**p.b:1+(t0.b-1)*((b-1)/(t0.b-1))**p.b
  name PRINT_CONTRAST_SigmoidParabolic
  label https://www.desmos.com/calculator/kpnisib1ak
  addUserKnob {20 Params_t l Params}
  addUserKnob {18 t0}
  t0 {{parent.print_contrast_pivot} {parent.print_contrast_pivot} {parent.print_contrast_pivot}}
  addUserKnob {18 p R 0 4}
  p {{parent.print_contrast} {parent.print_contrast} {parent.print_contrast}}
 }
 # endfrom
 Colorspace {
  name LINEARIZE_TONESCALE
  xpos 0
  ypos 950
  label "cctf: [value colorspace_in] > [value colorspace_out]"
  colorspace_in "2.40"
 }
 Dot {
  name DotDisplay
  xpos 0
  ypos 1000
 }
 set N23344020 [stack 0]
  Colorspace {
   name TO_DISPLAY_GAMUT
   label "gamut: [value primary_in] > [value primary_out]"
   xpos 0
   ypos 1100
   primary_in "Rec.2020"
  }
  Grade {
   name GRADE_DISPLAY_LINEAR
   xpos 0
   ypos 1150
  }
  Colorspace {
   name TO_DISPLAY_EOTF
   label "cctf: [value colorspace_in] > [value colorspace_out]"
   xpos 0
   ypos 1200
   colorspace_out "sRGB"
  }
 push $N23344020
 Dot {
  name DotDisplay1
  xpos 100
  ypos 1000
 }
 Dot {
  name DotDisplay2
  xpos 100
  ypos 1300
 }
 Switch {
  inputs 2
  which {{parent.todisplay_apply}}
  name SwitchDisplay
  xpos 0
  ypos 1300
 }
 Dot {
  name DotPlotLast
  xpos 0
  ypos 1350
 }
 set N23344020 [stack 0]
  # startfrom: https://github.com/jedypod/nuke-colortools/raw/master/toolsets/visualize/PlotSlice.nk
  #MIT License
  #
  #Copyright 2020 Jedediah Smith
  #
  #Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
  #
  #The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  #
  #THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  Group {
   xpos 100
   ypos 1400
   name PlotSliceCurve
   addUserKnob {20 PlotSlice_tab l PlotSlice}
   addUserKnob {41 useGPUIfAvailable l "Use GPU if available" T PlotSlice.useGPUIfAvailable}
   addUserKnob {12 pos1 l p1}
   addUserKnob {12 pos2 l p2 -STARTLINE}
   pos2 {256 256}
   addUserKnob {7 max_value l "max value" R 1 10}
   max_value 1.1
   addUserKnob {7 min_value l "min value" R -1 0}
   min_value -0.05
   addUserKnob {4 style M {replace over right bottom ""}}
   addUserKnob {6 antialias t "enable antialiasing. prettier, at the cost of speed." -STARTLINE}
   addUserKnob {6 draw_lines l "draw lines" t "draw horizontal lines every whole number" -STARTLINE}
   draw_lines true
   addUserKnob {18 lines_color l "lines color"}
   lines_color 0.1
   addUserKnob {6 lines_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  }
   Input {
    inputs 0
    name Input
    xpos -810
    ypos -658
   }
   Dot {
    name Dot13
    note_font_size 42
    note_font_color 0x7f7f7f01
    xpos -776
    ypos -558
   }
  set N33c4d4b0 [stack 0]
   Dot {
    name Dot12
    note_font_size 42
    note_font_color 0x7f7f7f01
    xpos -556
    ypos -558
   }
  set N33c52320 [stack 0]
   Transform {
    translate {{-parent.pos1} {-parent.pos1}}
    black_outside false
    name Transform4
    label T
    xpos -590
    ypos -520
   }
   Transform {
    rotate {{"-degrees( atan2(parent.pos2.y-parent.pos1.y, parent.pos2.x-parent.pos1.x) )"}}
    black_outside false
    name Transform5
    label "R\n"
    xpos -590
    ypos -472
   }
   Transform {
    scale {{"width / sqrt(pow(parent.pos2.x-parent.pos1.x,2) + pow(parent.pos2.y-parent.pos1.y,2))"}}
    black_outside false
    name Transform6
    label S
    xpos -590
    ypos -424
   }
  set N33c73a50 [stack 0]
   Crop {
    box {0 0 {Input.width} 1}
    reformat true
    crop false
    name Crop1
    xpos -700
    ypos -418
   }
  Expression {
    expr0 r/max_val-(min_val/max_val)
    expr1 g/max_val-(min_val/max_val)
    expr2 b/max_val-(min_val/max_val)
    expr3 a/max_val-(min_val/max_val)
    name Fit
    xpos -700
    ypos -394
    addUserKnob {20 Param}
    addUserKnob {7 max_val R 1 10}
    max_val {{parent.max_value+fabs(parent.min_value)}}
    addUserKnob {7 min_val R -1 0}
    min_val {{parent.min_value}}
   }
   Reformat {
    type "to box"
    box_width {{Input.width}}
    box_height {{Input.height}}
    box_fixed true
    resize distort
    filter impulse
    name Reformat1
    xpos -700
    ypos -370
   }
   Expression {
    temp_name0 c
    temp_expr0 0.8
    expr0 "fabs((y/height)-r)<=tolerance ? c : 0"
    expr1 "fabs((y/height)-g)<=tolerance ? c : 0"
    expr2 "fabs((y/height)-b)<=tolerance ? c : 0"
    expr3 "fabs((y/height)-a)<=tolerance ? c : 0"
    name PlotSlice_
    selected true
    xpos -700
    ypos -322
    addUserKnob {20 User}
    addUserKnob {7 tolerance}
    tolerance 0.0007
   }
  push $N33c73a50
   Reformat {
    type "to box"
    box_width {{"\[exists input] ? input.width : root.width"}}
    box_height {{"\[exists input] ? input.height : root.height"}}
    box_fixed true
    box_pixel_aspect {{"\[exists input] ? input.pixel_aspect : root.pixel_aspect"}}
    resize none
    black_outside true
    name BboxRemove
    xpos -590
    ypos -370
   }
   BlinkScript {
    recompileCount 1
    KernelDescription "2 \"PlotSlice\" iterate pixelWise a85c49a08f78aaad29c10667611d0922f3ade835175dd677155ef71c6ca45491 2 \"src\" Read Random \"dst\" Write Random 7 \"plot_input\" Bool 1 AA== \"color\" Float 1 AAAAAA== \"max_val\" Float 1 AAAAAA== \"min_val\" Float 1 AAAAAA== \"draw_lines\" Bool 1 AA== \"tolerance\" Float 1 AAAAAA== \"lines_color\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== 7 \"plot_input\" 1 1 \"color\" 1 1 \"max_val\" 1 1 \"min_val\" 1 1 \"draw_lines\" 1 1 \"tolerance\" 1 1 \"lines_color\" 3 1 0"
    kernelSource "kernel PlotSlice : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> src;\n  Image<eWrite, eAccessRandom> dst;\n\n  param:\n    bool plot_input;\n    float color;\n    float max_val;\n    float min_val;\n    bool draw_lines;\n    float tolerance;\n    float3 lines_color;\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write(float x, float y, int k, float c) \{\n    int n = 2;\n    int u0 = round(x);\n    int v0 = round(y);\n    // skip if center pixel weight is greater than tolerance\n    // if ( dst.bounds.inside(u0, v0)) \{\n    //   if (dst(u0, v0, 3) >= tolerance) return;\n    // \}\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float c0 = dst(u, v, k); // existing color\n          float w0 = dst(u, v, 3); // existing alpha\n          // merge current color sample over existing color sample\n          dst(u, v, k) = c*w+c0*(1-w);\n          // merge current weight over existing weight\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n  float scale(float x) \{\n    return (x*dst.bounds.height())/(max_val)-((min_val/max_val)*dst.bounds.height());\n  \}\n\n  void process(int2 pos) \{\n    if (pos.y == 0) \{\n      if (draw_lines) \{\n        for (int i = 0; i < max_val; i++) \{\n          for (int k = 0; k < 3; k++) \{\n            write(pos.x, scale(i), k, lines_color\[k]);\n          \}\n        \}\n      \}\n      if (plot_input) \{\n        float4 source = src(pos.x, pos.y);\n        for (int i = 0; i < 3; i++)\{\n          write(pos.x, scale(source\[i]), i, color);\n        \}\n      \}\n    \}\n  \}\n\};"
    rebuild ""
    PlotSlice_plot_input {{parent.antialias}}
    PlotSlice_color 0.6
    PlotSlice_max_val {{parent.max_value}}
    PlotSlice_min_val {{parent.min_value}}
    PlotSlice_draw_lines {{parent.draw_lines}}
    PlotSlice_tolerance 1.01
    PlotSlice_lines_color {{parent.lines_color.r} {parent.lines_color.g} {parent.lines_color.b}}
    rebuild_finalise ""
    name PlotSlice
    xpos -590
    ypos -328
   }
   Merge2 {
    inputs 2
    bbox B
    name Switch_Method
    xpos -590
    ypos -273
    disable {{parent.antialias}}
   }
   Matrix {
    channels rgba
    matrix {
        {1 2 1}
        {2 4 2}
        {1 2 1}
      }
    normalize true
    name Antialias
    xpos -590
    ypos -226
   }
   Keyer {
    operation "luminance key"
    name Keyer1
    xpos -590
    ypos -184
   }
  set N33ca88c0 [stack 0]
  push $N33c52320
   ContactSheet {
    inputs 2
    width {{Input.width}}
    height {{Input.height*2}}
    rows 2
    columns 1
    roworder TopBottom
    name ContactSheet2
    label Bottom
    xpos -370
    ypos -184
   }
  push $N33ca88c0
  push $N33c52320
   ContactSheet {
    inputs 2
    width {{Input.width*2}}
    height {{Input.height}}
    rows 1
    columns 2
    name ContactSheet1
    label Right
    xpos -480
    ypos -184
   }
  push $N33ca88c0
  push $N33c4d4b0
   Merge2 {
    inputs 2
    name Merge1
    xpos -810
    ypos -178
   }
  push $N33ca88c0
   Switch {
    inputs 4
    which {{parent.style}}
    name switch_plot_type
    xpos -810
    ypos -106
   }
   Output {
    name Output
    xpos -810
    ypos -34
   }
  end_group
  # endfrom
 push $N23344020
 Switch {
  inputs 2
  which {{parent.plot_show}}
  name SwitchPlotShow
  xpos 0
  ypos 1450
 }
 Output {
  name Output1
  xpos 0
  ypos 1500
 }
end_group