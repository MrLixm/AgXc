// version 6
// The tonescale curve for AgX
// to apply on log-encoded imagery (unless u_log_convert is true)
//
// All equations are from Troy Sobotka and Jed Smith work :
// https://github.com/sobotka/AgX-S2O3/blob/main/AgX.py

kernel AgXTonescale : ImageComputationKernel<ePixelWise>
{
    Image<eRead, eAccessPoint, eEdgeClamped> src;
    Image<eWrite> dst;

    param:
        float u_x_pivot;
        float u_y_pivot;
        float u_general_contrast;
        float u_toe_power;
        float u_shoulder_power;

    local:
        float g_x_pivot;
        float g_y_pivot;

    void define() {
        defineParam(u_x_pivot, "u_x_pivot", 0.5f);
        defineParam(u_y_pivot, "u_y_pivot", 0.5f);
        defineParam(u_general_contrast, "u_general_contrast", 2.0f);
        defineParam(u_toe_power, "u_toe_power", 3.0f);
        defineParam(u_shoulder_power, "u_shoulder_power", 3.25f);
    }

    void init() {
        g_x_pivot = u_x_pivot;
        g_y_pivot = u_y_pivot;
    }

    float equation_scale(
        float x_pivot, float y_pivot, float slope_pivot, float power
    ){
        float a = pow(slope_pivot * x_pivot, -1.0 * power);
        float b = pow(slope_pivot * (x_pivot / y_pivot), power) - 1.0;
        return pow(a * b, -1.0 / power);
    }

    float equation_hyperbolic(float x, float power){
        return x / pow(1.0 + pow(x, power), 1.0 / power);
    }

    float equation_term(float x, float x_pivot, float slope_pivot, float scale){
        return (slope_pivot * (x - x_pivot)) / scale;
    }

    float equation_curve(
        float value,
        float scale,
        float x_pivot,
        float y_pivot,
        float contrast,
        float toe_power,
        float shoulder_power
    ){
        float a = equation_hyperbolic(
            equation_term(value, x_pivot, contrast, scale),
            toe_power
        );
        a = a * scale + y_pivot;

        float b = equation_hyperbolic(
            equation_term(value, x_pivot, contrast, scale),
            shoulder_power
        );
        b = b * scale + y_pivot;

        return scale < 0.0? a: b;

    }

    float equation_full_curve(
        float value,
        float x_pivot,
        float y_pivot,
        float contrast,
        float toe_power,
        float shoulder_power
    ){
        float scale_x_pivot = value >= x_pivot? 1.0 - x_pivot: x_pivot;
        float scale_y_pivot = value >= x_pivot? 1.0 - y_pivot: y_pivot;

        float toe_scale = equation_scale(
            scale_x_pivot,
            scale_y_pivot,
            contrast,
            toe_power
        );

        float shoulder_scale = equation_scale(
            scale_x_pivot,
            scale_y_pivot,
            contrast,
            shoulder_power
        );

        float scale = value >= x_pivot? shoulder_scale: -1.0 * toe_scale;

        return equation_curve(
            value,
            scale,
            x_pivot,
            y_pivot,
            contrast,
            toe_power,
            shoulder_power
        );
    }

    void process(int2 pos) {

        float4 rgba = src();

        float3 converted_rgb(rgba.x, rgba.y, rgba.z);

        // apply per-channel tonescale curve
        converted_rgb.x = equation_full_curve(
            converted_rgb.x,
            u_x_pivot,
            u_y_pivot,
            u_general_contrast,
            u_toe_power,
            u_shoulder_power
        );
        converted_rgb.y = equation_full_curve(
            converted_rgb.y,
            u_x_pivot,
            u_y_pivot,
            u_general_contrast,
            u_toe_power,
            u_shoulder_power
        );
        converted_rgb.z = equation_full_curve(
            converted_rgb.z,
            u_x_pivot,
            u_y_pivot,
            u_general_contrast,
            u_toe_power,
            u_shoulder_power
        );

        dst() = float4(
            converted_rgb.x,
            converted_rgb.y,
            converted_rgb.z,
            rgba.w
        );
    }
};